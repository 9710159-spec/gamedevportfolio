/* autogenerated by Processing revision 1286 on 2025-10-15 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class spacegame extends PApplet {

// Mark Connell | 17 sept 2025 | spacegame
Spaceship s1;
ArrayList<Rock> rocks = new ArrayList<Rock>();
ArrayList<Laser> lasers = new ArrayList<Laser>();
ArrayList<Star> stars = new ArrayList<Star>();
ArrayList<PowerUp> powups = new ArrayList<PowerUp>();
int score, rocksPassed, level;
boolean play;
PImage title;


Timer rockTimer, puTimer;
 public void setup() {
  /* size commented out by preprocessor */;
  /* size commented out by preprocessor */;
  background(20);
  s1 = new Spaceship();
  puTimer = new Timer (5000);
  puTimer.start();
  //rock1 = new Rock();
  rockTimer = new Timer(300);
  rockTimer.start();
  score = 0;
  {
  title=loadImage("intro-1.png");
}
  rocksPassed = 0;
  /* size commented out by preprocessor */;
}


 public void draw() {
  if (!play) {
    startScreen();
  } else {



    background(22);
    if (puTimer.isFinished()) {
      powups.add(new PowerUp());
      puTimer.start();
    }
    for (int i =0; i < powups.size(); i++) {
      PowerUp pu = powups.get(i);
      pu.display();
      pu.move();
      if (pu.intersect(s1)) {
        powups.remove(pu);
        if (pu.type == 'h') {
          s1.health+=100;
        } else if (pu.type == 't') {
          s1.turretCount+=1;
          if (s1.turretCount>5) {
            s1.turretCount = 5;

          }
        }
      }
    }

    
      stars.add(new Star());
      for (int i = 0; i < stars.size(); i++) {
        Star star = stars.get(i);
        star.move();
        star.display();
        if (star.reachedbottom()) {
          // removew star from stars
        }
      }
      infopanel();
      if (rockTimer.isFinished()) {
        rocks.add(new Rock());
        rockTimer.start();
        score = 0;
      }
      for (int i = 0; i < rocks.size(); i++) {
        Rock rock = rocks.get(i);
        rock.display();

        if (s1.intersect(rock)) {
          rocks.remove(rock);
          score+=rock.diam;
          s1.health-=10;
        }
        rock.move();
        if (rock.reachedBottom()) {
          rocksPassed++;
          rocks.remove(rock);
          i--;
        }
        println("Rocks: "+ rocks.size());
      }
      for (int i = 0; i < lasers.size(); i++) {
        Laser laser = lasers.get(i);
        laser.display();
        laser.move();
        if (laser.reachedTop()) {
          lasers.remove(laser);
          i--;
          continue;
        }
        for (int j = 0; j<rocks.size(); j++) {
          Rock r = rocks.get(j);
          if (laser.intersect(r)) {
            lasers.remove(laser);
            r.diam -= 50;
          }
          if (r.diam<5) {
            rocks.remove(r);
            j--;
          }
          score+=r.diam;
          println(lasers.size());
        }
      }
      //rock1.display();
      // rock1.move();
      s1.display();
      s1.move(mouseX, mouseY);
    
  }
}




 public void mousePressed() {
  lasers.add(new Laser(s1.x, s1.y));
}

 public void infopanel() {
  rectMode(CENTER);


  fill(127, 127);
  //noStroke();
  rect(width/2, 4.4f*height/5, width, 50);
  fill(255);
  textSize(30);
  text("score: " + score, 30, width/2);
  text("health: " + s1.health, 300, width/2);
  text("Rocks Passed: " + rocksPassed, 500, width/2);
  text("Ammo: " + s1.laserCount, 800, width/2);
}
 public void gameOver()
{
  background(0);
  fill(255);
  text("Game Over!", width/2, width/2);
  text("Score: " + score, width/2, height/2);
  noLoop();
}
 public void startScreen() {
  image(title, 200, 200);
  fill(255);
  //text("Click Mouse To Start", width/2, height/2);
  if (mousePressed)
    play = true;
}
class PowerUp {
  // Member variables
  int x, y, w, diam, speed;
  //PImage pu;
  char type;
  int c1;
  // Constructor
  PowerUp() {
    x = PApplet.parseInt(random(width));
    y = -100;
    w = 100;
    speed = PApplet.parseInt(random(1, 10));

    if (random(10)>6.6f) {
      //pu = loadImage("rock1.png");
      type = 'a'; //ammo
      c1 = color(255, 0, 0);
    } else if (random(10)>5.0f) {
      //pu = loadImage("health.png");
      type = 'h'; //health
      c1 = color(0, 255, 0);
    } else {
      //pu = loadImage("rock3.png");
      type = 't'; //turret count
      c1 = color(0, 0, 255);
    }
  }

  // Member Methods
   public void display() {
    fill(c1);
    ellipse(x, y, w, w);
    fill(255);
    textAlign(CENTER);
    //text(z, x, y);
   // imageMode(CENTER);
  //  pu.resize(diam, diam);
    //image(pu, x, y);
    rectMode(CENTER);
  }
   public void move() {
    y = y + speed;
  }
   public void fire() {
  }
   public boolean reachedBottom() {
    if (y>height+100) {
      return true;
    } else {
      return false;
    }
  }
   public boolean intersect(Spaceship s) {
    float d = dist(x, y, s.x, s.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
}
class Rock {
  // Member variables
  int x, y, diam, speed;
  PImage Rock;

  // Constructor
  Rock() {
    diam = PApplet.parseInt(random(50, 100));
    x = PApplet.parseInt(random(width));
    y = -diam; // why are you putting your rocks at half height ? 
    speed = PApplet.parseInt(random(1, 10));
    if (random(10)>6.6f) {
      Rock = loadImage("rock1.png");
    } else if (random(10)>5.0f) {
      Rock = loadImage("rock2.png");
    } else {
      Rock = loadImage("rock3.png");
    }
  }

  // Member Methods
   public void display() {
    imageMode(CENTER);
    Rock.resize(diam, diam);
    image(Rock, x, y);
    rectMode(CENTER);
  }
   public void move() {
    y = y + speed;
  }
   public void fire() {
  }
   public boolean reachedBottom() {
    if (y>height+100) {
      return true;
    } else {
      return false;
    }
  }
}
class Spaceship {
  // Member variables
  int x, y, w, health, ammo, turretCount, laserCount;
  PImage ship;

  // Constructor
  Spaceship() {
    x = width/2;
    y = height/2;
    w = 100;
    laserCount = 100;
    turretCount = 1;
    health = 100;
    ship = loadImage("ufo.png");
  }

  // Member Methods
   public void display() {
    rectMode(CENTER);
    image(ship, x-0, y-0);
  }
   public void move(int x, int y) {
    this.y = y;
    this.x = x;
  }
   public boolean fire() {
    if (laserCount>0) {
      return true;
    } else {
      return false;
    }
  }


   public boolean intersect(Rock r) {
    float d = dist(x, y, r.x, r.y);
    if (d<5) {
      return true;
    } else {
      return false;
    }
  }
}
class Star {
  int x, y, w, speed;
  Star() {
    x = PApplet.parseInt(random(width));
    y = -10;
    w = PApplet.parseInt(random(1, 4));
    speed = PApplet.parseInt(random(1, 10));
  }

   public void display() {
    fill(random(255, 255));
    ellipse(x, y, w, w);
  }
   public void move() {
    y+=speed;
  }

   public boolean reachedbottom() {
    if (y>height+10) {
      return true;
    } else {
      return false;
    }
  }
}
//Daniel Shiffman
class Timer {

  int savedTime; // When Timer started
  int totalTime; // How long Timer should last

  Timer(int tempTotalTime) {
    totalTime = tempTotalTime;
  }

  // Starting the timer
   public void start() {
    // When the timer starts it stores the current time in milliseconds.
    savedTime = millis();
  }

  // The function isFinished() returns true if 5,000 ms have passed. 
  // The work of the timer is farmed out to this method.
   public boolean isFinished() { 
    // Check how much time has passed
    int passedTime = millis()- savedTime;
    if (passedTime > totalTime) {
      return true;
    } else {
      return false;
    }
  }
}
class Laser {
  // Member variables
  int w, h, x, y, diam, speed;
  PImage Laser;

  // Constructor
  Laser(int x, int y) {
    this.x = x;
    this.y = y;
    w = 4;
    h = 10;
    speed = 20;
    diam = PApplet.parseInt(random(50, 100));
    x = PApplet.parseInt(random(width));
    y = -diam; 
    if (random(10)>6.6f) {
      Laser = loadImage("laser.png");
    } else if (random(10)>5.0f) {
      Laser = loadImage("laser.png");
    } else {
      Laser = loadImage("laser.png");
    }
  }

  // Member Methods
   public void display() {
    rectMode(CENTER);
    fill(255, 0, 0);
    rect(x, y, w, h);
  }
   public void move() {
    y = y - speed;
  }
   public void fire() {
  }
   public boolean reachedTop() {
    if (y<0-10) {
      return true;
    } else {
      return false;
    }
  }

   public boolean intersect(Rock r) {
    float d = dist(x, y, r.x, r.y);
    if (d<=r.diam) {
      return true;
    } else {
      return false;
    }
  }
}


  public void settings() { fullScreen(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "--full-screen", "--bgcolor=#666666", "--stop-color=#cccccc", "spacegame" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
